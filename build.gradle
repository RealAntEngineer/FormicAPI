buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.jreleaser' version '1.17.0'

}

import java.nio.file.Files
import java.nio.file.Paths

def loadEnv() {
    def envFile = rootProject.file(".env")
    if (envFile.exists()) {
        envFile.eachLine { line ->
            def matcher = line =~ /^\s*([\w\.]+)\s*=\s*(.*)\s*$/
            if (matcher.matches()) {
                def key = matcher[0][1]
                def value = matcher[0][2]
                System.setProperty(key as String, value as String)
            }
        }
    }
}

loadEnv()
version = minecraft_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: mapping_channel, version: minecraft_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformers.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            arg '-mixin.config=formicapi.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'

            //property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }


        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate

    //JEI

    maven {

        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://mvnrepository.com"
    }
    //curios
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //TODO make sure we only depend on catnip
    implementation(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
    implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
    compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}"))
    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"))
    implementation(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    //JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    //curios

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    //unit test tool
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    //x chart to plot things
    implementation("org.knowm.xchart:xchart:3.2.2")

}
mixin {
    add sourceSets.main, 'formicapi.refmap.json'
    config 'formicapi.mixins.json'

    //debug.verbose = true
    //debug.export = true
}
// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1.20.1 '+mod_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfig':'formicapi.mixins.json'
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.named('build').configure {
    dependsOn 'reobfJar'
}

tasks.test {
    useJUnitPlatform()
    //debug = true;
}
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin

//def reobfJarFile = tasks.named('jar').get().archiveFile.get().asFile.absolutePath
tasks.remapJar {
    archiveClassifier.set("mapped_official_${minecraft_version}")
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(tasks.remapJar) {
                classifier = tasks.remapJar.archiveClassifier.get()
            }
        }
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}